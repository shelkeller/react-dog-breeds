{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/Users/spark/repos/react-dog-breeds/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"./styles.css\";import*as React from\"react\";import PuppyGrid from\"./components/PuppyGrid\";import{useEffect,useState}from\"react\";import axios from\"axios\";import{apiGetAllDogBreeds,apiGetRandomImage}from\"./api\";/*\nUsing React, create the basic page that lists and filters dog breeds. This is the docs for the API you will interface\nwith: https://dog.ceo/dog-api/documentation/. You will use the API to fetch a list of dog breeds which will be the basis of\nyour app. By default, your page should have a tiled view of all dog breeds returned from that API with the name of the breed\noverlaying the image of the breed.\nThere should be a way to filter the dog breed names based on an input on the page. When a user is typing, the tiles should\nautomatically show/not show based on the filter input changing. Your page should be responsive. You can choose whether to\ninclude sub-breeds into your app or not.\n\n\nTODO: \n- Filter input \n- Grid\n\n*/export default function App(){let _useState=useState([]),_useState2=_slicedToArray(_useState,2),puppies=_useState2[0],setPuppies=_useState2[1];/*\n  GET DOG PLAN: \n  first get all dog breeds \n  https://dog.ceo/api/breeds/list/all\n  message.entries into 2D\n  */useEffect(()=>{apiGetAllDogBreeds().then(rsp=>{let pushPuppies=[];let length=Object.entries(rsp.data.message).length;// Use Object.entries to extrapolate this JSON object out into a 2D array of strings.\nObject.entries(rsp.data.message).forEach((entry,index)=>{// Two kinds of dogs in this list: dogs with one name, and dogs with two names\n// Dogs with one name:\nif(entry[1].length===0){apiGetRandomImage(entry[0]).then(imageRsp=>{pushPuppies.push({firstName:\"\",lastName:entry[0],image:imageRsp.data.message});if(index===length-1){// We've reached the end and gotten all of our images.\n// Time to update the state and thus the DOM.\nsetPuppies(pushPuppies);}});}// Dogs with two names:\nif(entry[1].length>0){entry[1].forEach((subPup,subIndex)=>{apiGetRandomImage(entry[0],subPup).then(imageRsp=>{pushPuppies.push({firstName:subPup,lastName:entry[0],image:imageRsp.data.message});if(index===length-1&&subIndex===entry[1].length-1){// If our last entry happens to have children, we make sure we reach the\n// end of those children.\nsetPuppies(pushPuppies);}});});}});});},[]);return/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"It's Puppy Time\"}),/*#__PURE__*/_jsx(PuppyGrid,{puppies:puppies})]})});}","map":{"version":3,"sources":["C:/Users/spark/repos/react-dog-breeds/src/App.js"],"names":["React","PuppyGrid","useEffect","useState","axios","apiGetAllDogBreeds","apiGetRandomImage","App","puppies","setPuppies","then","rsp","pushPuppies","length","Object","entries","data","message","forEach","entry","index","imageRsp","push","firstName","lastName","image","subPup","subIndex"],"mappings":"oPAAA,MAAO,cAAP,CACA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,kBAAT,CAA6BC,iBAA7B,KAAsD,OAAtD,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,cAAe,SAASC,CAAAA,GAAT,EAAe,eACAJ,QAAQ,CAAC,EAAD,CADR,wCACvBK,OADuB,eACdC,UADc,eAG5B;AACF;AACA;AACA;AACA;AACA,IAEEP,SAAS,CAAC,IAAM,CACdG,kBAAkB,GAAGK,IAArB,CAA2BC,GAAD,EAAS,CACjC,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA,GAAIC,CAAAA,MAAM,CAAGC,MAAM,CAACC,OAAP,CAAeJ,GAAG,CAACK,IAAJ,CAASC,OAAxB,EAAiCJ,MAA9C,CACA;AACAC,MAAM,CAACC,OAAP,CAAeJ,GAAG,CAACK,IAAJ,CAASC,OAAxB,EAAiCC,OAAjC,CAAyC,CAACC,KAAD,CAAQC,KAAR,GAAkB,CACzD;AAEA;AACA,GAAID,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,GAAoB,CAAxB,CAA2B,CACzBP,iBAAiB,CAACa,KAAK,CAAC,CAAD,CAAN,CAAjB,CAA4BT,IAA5B,CAAkCW,QAAD,EAAc,CAC7CT,WAAW,CAACU,IAAZ,CAAiB,CACfC,SAAS,CAAE,EADI,CAEfC,QAAQ,CAAEL,KAAK,CAAC,CAAD,CAFA,CAGfM,KAAK,CAAEJ,QAAQ,CAACL,IAAT,CAAcC,OAHN,CAAjB,EAKA,GAAIG,KAAK,GAAKP,MAAM,CAAG,CAAvB,CAA0B,CACxB;AACA;AACAJ,UAAU,CAACG,WAAD,CAAV,CACD,CACF,CAXD,EAYD,CAED;AACA,GAAIO,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,CAAkB,CAAtB,CAAyB,CACvBM,KAAK,CAAC,CAAD,CAAL,CAASD,OAAT,CAAiB,CAACQ,MAAD,CAASC,QAAT,GAAsB,CACrCrB,iBAAiB,CAACa,KAAK,CAAC,CAAD,CAAN,CAAWO,MAAX,CAAjB,CAAoChB,IAApC,CAA0CW,QAAD,EAAc,CACrDT,WAAW,CAACU,IAAZ,CAAiB,CACfC,SAAS,CAAEG,MADI,CAEfF,QAAQ,CAAEL,KAAK,CAAC,CAAD,CAFA,CAGfM,KAAK,CAAEJ,QAAQ,CAACL,IAAT,CAAcC,OAHN,CAAjB,EAKA,GAAIG,KAAK,GAAKP,MAAM,CAAG,CAAnB,EAAwBc,QAAQ,GAAKR,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,CAAkB,CAA3D,CAA8D,CAC5D;AACA;AACAJ,UAAU,CAACG,WAAD,CAAV,CACD,CACF,CAXD,EAYD,CAbD,EAcD,CACF,CApCD,EAqCD,CAzCD,EA0CD,CA3CQ,CA2CN,EA3CM,CAAT,CA6CA,mBACE,mCACE,uCACE,uCADF,cAEE,KAAC,SAAD,EAAW,OAAO,CAAEJ,OAApB,EAFF,GADF,EADF,CAQD","sourcesContent":["import \"./styles.css\";\nimport * as React from \"react\";\nimport PuppyGrid from \"./components/PuppyGrid\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { apiGetAllDogBreeds, apiGetRandomImage } from \"./api\";\n/*\nUsing React, create the basic page that lists and filters dog breeds. This is the docs for the API you will interface\nwith: https://dog.ceo/dog-api/documentation/. You will use the API to fetch a list of dog breeds which will be the basis of\nyour app. By default, your page should have a tiled view of all dog breeds returned from that API with the name of the breed\noverlaying the image of the breed.\nThere should be a way to filter the dog breed names based on an input on the page. When a user is typing, the tiles should\nautomatically show/not show based on the filter input changing. Your page should be responsive. You can choose whether to\ninclude sub-breeds into your app or not.\n\n\nTODO: \n- Filter input \n- Grid\n\n*/\n\nexport default function App() {\n  let [puppies, setPuppies] = useState([]);\n\n  /*\n  GET DOG PLAN: \n  first get all dog breeds \n  https://dog.ceo/api/breeds/list/all\n  message.entries into 2D\n  */\n\n  useEffect(() => {\n    apiGetAllDogBreeds().then((rsp) => {\n      let pushPuppies = [];\n      let length = Object.entries(rsp.data.message).length;\n      // Use Object.entries to extrapolate this JSON object out into a 2D array of strings.\n      Object.entries(rsp.data.message).forEach((entry, index) => {\n        // Two kinds of dogs in this list: dogs with one name, and dogs with two names\n\n        // Dogs with one name:\n        if (entry[1].length === 0) {\n          apiGetRandomImage(entry[0]).then((imageRsp) => {\n            pushPuppies.push({\n              firstName: \"\",\n              lastName: entry[0],\n              image: imageRsp.data.message\n            });\n            if (index === length - 1) {\n              // We've reached the end and gotten all of our images.\n              // Time to update the state and thus the DOM.\n              setPuppies(pushPuppies);\n            }\n          });\n        }\n\n        // Dogs with two names:\n        if (entry[1].length > 0) {\n          entry[1].forEach((subPup, subIndex) => {\n            apiGetRandomImage(entry[0], subPup).then((imageRsp) => {\n              pushPuppies.push({\n                firstName: subPup,\n                lastName: entry[0],\n                image: imageRsp.data.message\n              });\n              if (index === length - 1 && subIndex === entry[1].length - 1) {\n                // If our last entry happens to have children, we make sure we reach the\n                // end of those children.\n                setPuppies(pushPuppies);\n              }\n            });\n          });\n        }\n      });\n    });\n  }, []);\n\n  return (\n    <main>\n      <header>\n        <h1>It's Puppy Time</h1>\n        <PuppyGrid puppies={puppies} />\n      </header>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}