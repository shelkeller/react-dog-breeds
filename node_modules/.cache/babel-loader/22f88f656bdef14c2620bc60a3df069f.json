{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/Users/spark/repos/react-dog-breeds/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\spark\\\\repos\\\\react-dog-breeds\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport * as React from \"react\";\nimport PuppyGrid from \"./components/PuppyGrid\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { apiGetAllDogBreeds, apiGetRandomImage } from \"./api\";\n/*\nUsing React, create the basic page that lists and filters dog breeds. This is the docs for the API you will interface\nwith: https://dog.ceo/dog-api/documentation/. You will use the API to fetch a list of dog breeds which will be the basis of\nyour app. By default, your page should have a tiled view of all dog breeds returned from that API with the name of the breed\noverlaying the image of the breed.\nThere should be a way to filter the dog breed names based on an input on the page. When a user is typing, the tiles should\nautomatically show/not show based on the filter input changing. Your page should be responsive. You can choose whether to\ninclude sub-breeds into your app or not.\n\n\nTODO: \n- Filter input \n- Grid\n\n*/\n\nexport default function App() {\n  _s();\n\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      puppies = _useState2[0],\n      setPuppies = _useState2[1];\n  /*\n  GET DOG PLAN: \n  first get all dog breeds \n  https://dog.ceo/api/breeds/list/all\n  message.entries into 2D\n  */\n\n\n  useEffect(() => {\n    apiGetAllDogBreeds().then(rsp => {\n      let pushPuppies = [];\n      let length = Object.entries(rsp.data.message).length; // Use Object.entries to extrapolate this JSON object out into a 2D array of strings.\n\n      Object.entries(rsp.data.message).forEach((entry, index) => {\n        // Two kinds of dogs in this list: dogs with one name, and dogs with two names\n        // Dogs with one name:\n        if (entry[1].length === 0) {\n          apiGetRandomImage(entry[0]).then(imageRsp => {\n            pushPuppies.push({\n              firstName: \"\",\n              lastName: entry[0],\n              image: imageRsp.data.message\n            });\n\n            if (index === length - 1) {\n              // We've reached the end and gotten all of our images.\n              // Time to update the state and thus the DOM.\n              setPuppies(pushPuppies);\n            }\n          });\n        } // Dogs with two names:\n\n\n        if (entry[1].length > 0) {\n          entry[1].forEach((subPup, subIndex) => {\n            apiGetRandomImage(entry[0], subPup).then(imageRsp => {\n              pushPuppies.push({\n                firstName: subPup,\n                lastName: entry[0],\n                image: imageRsp.data.message\n              });\n\n              if (index === length - 1 && subIndex === entry[1].length - 1) {\n                // If our last entry happens to have children, we make sure we reach the\n                // end of those children.\n                setPuppies(pushPuppies);\n              }\n            });\n          });\n        }\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"It's Puppy Time \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PuppyGrid, {\n        puppies: puppies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bsjw5gTlG6vqGXSH0ywRMXdxhKo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/spark/repos/react-dog-breeds/src/App.js"],"names":["React","PuppyGrid","useEffect","useState","axios","apiGetAllDogBreeds","apiGetRandomImage","App","puppies","setPuppies","then","rsp","pushPuppies","length","Object","entries","data","message","forEach","entry","index","imageRsp","push","firstName","lastName","image","subPup","subIndex"],"mappings":";;;;;;AAAA,OAAO,cAAP;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,OAAtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAAA,kBACAJ,QAAQ,CAAC,EAAD,CADR;AAAA;AAAA,MACvBK,OADuB;AAAA,MACdC,UADc;AAG5B;AACF;AACA;AACA;AACA;AACA;;;AAEEP,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,kBAAkB,GAAGK,IAArB,CAA2BC,GAAD,IAAS;AACjC,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeJ,GAAG,CAACK,IAAJ,CAASC,OAAxB,EAAiCJ,MAA9C,CAFiC,CAGjC;;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeJ,GAAG,CAACK,IAAJ,CAASC,OAAxB,EAAiCC,OAAjC,CAAyC,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzD;AAEA;AACA,YAAID,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,KAAoB,CAAxB,EAA2B;AACzBP,UAAAA,iBAAiB,CAACa,KAAK,CAAC,CAAD,CAAN,CAAjB,CAA4BT,IAA5B,CAAkCW,QAAD,IAAc;AAC7CT,YAAAA,WAAW,CAACU,IAAZ,CAAiB;AACfC,cAAAA,SAAS,EAAE,EADI;AAEfC,cAAAA,QAAQ,EAAEL,KAAK,CAAC,CAAD,CAFA;AAGfM,cAAAA,KAAK,EAAEJ,QAAQ,CAACL,IAAT,CAAcC;AAHN,aAAjB;;AAKA,gBAAIG,KAAK,KAAKP,MAAM,GAAG,CAAvB,EAA0B;AACxB;AACA;AACAJ,cAAAA,UAAU,CAACG,WAAD,CAAV;AACD;AACF,WAXD;AAYD,SAjBwD,CAmBzD;;;AACA,YAAIO,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,GAAkB,CAAtB,EAAyB;AACvBM,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASD,OAAT,CAAiB,CAACQ,MAAD,EAASC,QAAT,KAAsB;AACrCrB,YAAAA,iBAAiB,CAACa,KAAK,CAAC,CAAD,CAAN,EAAWO,MAAX,CAAjB,CAAoChB,IAApC,CAA0CW,QAAD,IAAc;AACrDT,cAAAA,WAAW,CAACU,IAAZ,CAAiB;AACfC,gBAAAA,SAAS,EAAEG,MADI;AAEfF,gBAAAA,QAAQ,EAAEL,KAAK,CAAC,CAAD,CAFA;AAGfM,gBAAAA,KAAK,EAAEJ,QAAQ,CAACL,IAAT,CAAcC;AAHN,eAAjB;;AAKA,kBAAIG,KAAK,KAAKP,MAAM,GAAG,CAAnB,IAAwBc,QAAQ,KAAKR,KAAK,CAAC,CAAD,CAAL,CAASN,MAAT,GAAkB,CAA3D,EAA8D;AAC5D;AACA;AACAJ,gBAAAA,UAAU,CAACG,WAAD,CAAV;AACD;AACF,aAXD;AAYD,WAbD;AAcD;AACF,OApCD;AAqCD,KAzCD;AA0CD,GA3CQ,EA2CN,EA3CM,CAAT;AA6CA,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA,oDAAoB;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA/DuBD,G;;KAAAA,G","sourcesContent":["import \"./styles.css\";\nimport * as React from \"react\";\nimport PuppyGrid from \"./components/PuppyGrid\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { apiGetAllDogBreeds, apiGetRandomImage } from \"./api\";\n/*\nUsing React, create the basic page that lists and filters dog breeds. This is the docs for the API you will interface\nwith: https://dog.ceo/dog-api/documentation/. You will use the API to fetch a list of dog breeds which will be the basis of\nyour app. By default, your page should have a tiled view of all dog breeds returned from that API with the name of the breed\noverlaying the image of the breed.\nThere should be a way to filter the dog breed names based on an input on the page. When a user is typing, the tiles should\nautomatically show/not show based on the filter input changing. Your page should be responsive. You can choose whether to\ninclude sub-breeds into your app or not.\n\n\nTODO: \n- Filter input \n- Grid\n\n*/\n\nexport default function App() {\n  let [puppies, setPuppies] = useState([]);\n\n  /*\n  GET DOG PLAN: \n  first get all dog breeds \n  https://dog.ceo/api/breeds/list/all\n  message.entries into 2D\n  */\n\n  useEffect(() => {\n    apiGetAllDogBreeds().then((rsp) => {\n      let pushPuppies = [];\n      let length = Object.entries(rsp.data.message).length;\n      // Use Object.entries to extrapolate this JSON object out into a 2D array of strings.\n      Object.entries(rsp.data.message).forEach((entry, index) => {\n        // Two kinds of dogs in this list: dogs with one name, and dogs with two names\n\n        // Dogs with one name:\n        if (entry[1].length === 0) {\n          apiGetRandomImage(entry[0]).then((imageRsp) => {\n            pushPuppies.push({\n              firstName: \"\",\n              lastName: entry[0],\n              image: imageRsp.data.message\n            });\n            if (index === length - 1) {\n              // We've reached the end and gotten all of our images.\n              // Time to update the state and thus the DOM.\n              setPuppies(pushPuppies);\n            }\n          });\n        }\n\n        // Dogs with two names:\n        if (entry[1].length > 0) {\n          entry[1].forEach((subPup, subIndex) => {\n            apiGetRandomImage(entry[0], subPup).then((imageRsp) => {\n              pushPuppies.push({\n                firstName: subPup,\n                lastName: entry[0],\n                image: imageRsp.data.message\n              });\n              if (index === length - 1 && subIndex === entry[1].length - 1) {\n                // If our last entry happens to have children, we make sure we reach the\n                // end of those children.\n                setPuppies(pushPuppies);\n              }\n            });\n          });\n        }\n      });\n    });\n  }, []);\n\n  return (\n    <main>\n      <header>\n        <h1>It's Puppy Time <input type=\"text\" /> </h1>\n        <PuppyGrid puppies={puppies} />\n      </header>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}