{"version":3,"sources":["components/GridEntry.js","components/PuppyGrid.js","api.js","App.js","index.js"],"names":["GridEntry","props","puppy","backgroundStyle","backgroundImage","image","backgroundSize","position","firstLetterUc","string","length","toUpperCase","slice","filtered","className","style","bottom","left","firstName","lastName","PuppyGrid","puppies","sort","a","b","aName","bName","map","apiGetRandomImage","breed","subBreed","innerPart","url","axios","get","App","useState","setPuppies","filter","setFilter","puppiesLoaded","setPuppiesLoaded","useEffect","then","rsp","pushPuppies","Object","entries","data","message","forEach","entry","index","imageRsp","push","subPup","subIndex","top","fontSize","float","onChange","e","target","value","lowerCaseFilter","toLowerCase","newPuppies","includes","type","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.9fd63784.chunk.js","sourcesContent":["const GridEntry = (props) => {\r\n  let { puppy } = props;\r\n  let backgroundStyle = { \r\n    backgroundImage: \"url(\" + puppy.image + \")\", \r\n    backgroundSize: 'cover', \r\n    position: 'relative'\r\n   };\r\n  \r\n  let labelStyle = {\r\n    position: \"absolute\", \r\n    bottom: \"5px\", \r\n    left: \"5px\"\r\n  } \r\n\r\n  let firstLetterUc = (string) => {\r\n    if (string.length) return string[0].toUpperCase() + string.slice(1);\r\n    return '';\r\n  }\r\n\r\n  return (\r\n    <>\r\n    { \r\n    !puppy.filtered && \r\n        <div className=\"grid-entry\" style={backgroundStyle}>\r\n        <span className=\"entry-label\" style={labelStyle}>{firstLetterUc(puppy.firstName)} {firstLetterUc(puppy.lastName)}</span>\r\n        </div>\r\n    }\r\n  </>\r\n    \r\n  );\r\n};\r\n\r\nexport default GridEntry;\r\n","import GridEntry from \"./GridEntry\";\r\n\r\nconst PuppyGrid = (props) => {\r\n  let { puppies } = props;\r\n  // Our state is not sorted by default, as it is populated by a chain of promises. \r\n  \r\n  function compareDogNames( a, b ) {\r\n    let aName = a.firstName+a.lastName;\r\n    let bName = b.firstName+b.lastName;\r\n\r\n    if ( aName < bName ){\r\n      return -1;\r\n    }\r\n    if ( aName > bName ){\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  puppies.sort(compareDogNames);\r\n\r\n  return (\r\n    <>\r\n    <div className=\"grid\">\r\n      {!!puppies.length && puppies.map((puppy) => (\r\n        <GridEntry puppy={puppy} />\r\n      ))}\r\n    </div>\r\n    {!puppies.length && <div className=\"loading\">Fetching puppies...</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PuppyGrid;\r\n","import axios from \"axios\";\r\n\r\nexport const apiGetAllDogBreeds = () => {\r\n  return axios.get(\"https://dog.ceo/api/breeds/list/all\");\r\n};\r\n\r\n// hound, basset\r\nexport const apiGetRandomImage = (breed, subBreed) => {\r\n  let innerPart = breed;\r\n  if (!!subBreed) innerPart += \"/\" + subBreed;\r\n  let url = \"https://dog.ceo/api/breed/\" + innerPart + \"/images/random\";\r\n  return axios.get(url);\r\n};\r\n","import \"./styles.css\";\nimport * as React from \"react\";\nimport PuppyGrid from \"./components/PuppyGrid\";\nimport {IoPawSharp} from \"react-icons/io5\"\nimport { useEffect, useState } from \"react\";\nimport { apiGetAllDogBreeds, apiGetRandomImage } from \"./api\";\n\n/*\nTODO: \nclean up tree search algorithm \nmove all styles to css \nget rid of puppygrid component\nreal responsive design\n*/\n\nexport default function App() {\n  let [puppies, setPuppies] = useState([]);\n  let [filter, setFilter] = useState('');\n  let [puppiesLoaded, setPuppiesLoaded] = useState(false);\n\n  useEffect(() => {\n    apiGetAllDogBreeds().then((rsp) => {\n      let pushPuppies = [];\n      let length = Object.entries(rsp.data.message).length;\n      // Use Object.entries to extrapolate this JSON object out into a 2D array of strings.\n      Object.entries(rsp.data.message).forEach((entry, index) => {\n        // Two kinds of dogs in this list: dogs with one name, and dogs with two names\n\n        // Dogs with one name:\n        if (entry[1].length === 0) {\n          apiGetRandomImage(entry[0]).then((imageRsp) => {\n            pushPuppies.push({\n              firstName: \"\",\n              lastName: entry[0],\n              image: imageRsp.data.message\n            });\n            if (index === length - 1) {\n              // We've reached the end and gotten all of our images.\n              // Time to update the state and thus the DOM.\n              setPuppies(pushPuppies);\n              setPuppiesLoaded(true);\n            }\n          });\n        }\n        // Dogs with two names:\n        if (entry[1].length > 0) {\n          entry[1].forEach((subPup, subIndex) => {\n            apiGetRandomImage(entry[0], subPup).then((imageRsp) => {\n              pushPuppies.push({\n                firstName: subPup,\n                lastName: entry[0],\n                image: imageRsp.data.message\n              });\n              if (index === length - 1 && subIndex === entry[1].length - 1) {\n                // If our last entry happens to have children, we make sure we reach the\n                // end of those children.\n                setPuppies(pushPuppies);\n                setPuppiesLoaded(true);\n              }\n            });\n          });\n        }\n      });\n    });\n  }, []);\n\n  const handleChange = e => {\n   setFilter(e.target.value);\n   // Search is case insensitive: \n   let lowerCaseFilter = e.target.value.toLowerCase();\n   let newPuppies = puppies.map(puppy => {\n      puppy.filtered = !puppy.firstName.includes(lowerCaseFilter) && !puppy.lastName.includes(lowerCaseFilter);\n      return puppy;\n   });\n   setPuppies(newPuppies);\n\n  }\n  return (\n    <main>\n      <header>\n        <h1>\n          It's Puppy Time \n          <IoPawSharp style={{position: \"relative\", top:\"5px\"}} />\n          <span style={{fontSize: '15px', float: \"right\", position: \"relative\", top: \"5px\"}}>All dogs are puppies.</span>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            value={filter} \n          /> \n        </h1>\n        </header>\n        <PuppyGrid puppies={puppies} puppiesLoaded={puppiesLoaded} />\n    </main>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}